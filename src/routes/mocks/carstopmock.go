// Code generated by MockGen. DO NOT EDIT.
// Source: src/routes/carstop.go
//
// Generated by this command:
//
//	mockgen -source=src/routes/carstop.go -destination=src/routes/mocks/carstopmock.go -package=mockroutes
//

// Package mockroutes is a generated GoMock package.
package mockroutes

import (
	reflect "reflect"

	gps "github.com/victorguarana/go-vehicle-route/src/gps"
	routes "github.com/victorguarana/go-vehicle-route/src/routes"
	vehicles "github.com/victorguarana/go-vehicle-route/src/vehicles"
	gomock "go.uber.org/mock/gomock"
)

// MockICarStop is a mock of ICarStop interface.
type MockICarStop struct {
	ctrl     *gomock.Controller
	recorder *MockICarStopMockRecorder
}

// MockICarStopMockRecorder is the mock recorder for MockICarStop.
type MockICarStopMockRecorder struct {
	mock *MockICarStop
}

// NewMockICarStop creates a new mock instance.
func NewMockICarStop(ctrl *gomock.Controller) *MockICarStop {
	mock := &MockICarStop{ctrl: ctrl}
	mock.recorder = &MockICarStopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICarStop) EXPECT() *MockICarStopMockRecorder {
	return m.recorder
}

// Car mocks base method.
func (m *MockICarStop) Car() vehicles.ICar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Car")
	ret0, _ := ret[0].(vehicles.ICar)
	return ret0
}

// Car indicates an expected call of Car.
func (mr *MockICarStopMockRecorder) Car() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Car", reflect.TypeOf((*MockICarStop)(nil).Car))
}

// Flights mocks base method.
func (m *MockICarStop) Flights() []routes.IFlight {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flights")
	ret0, _ := ret[0].([]routes.IFlight)
	return ret0
}

// Flights indicates an expected call of Flights.
func (mr *MockICarStopMockRecorder) Flights() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flights", reflect.TypeOf((*MockICarStop)(nil).Flights))
}

// IsClient mocks base method.
func (m *MockICarStop) IsClient() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClient")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClient indicates an expected call of IsClient.
func (mr *MockICarStopMockRecorder) IsClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClient", reflect.TypeOf((*MockICarStop)(nil).IsClient))
}

// IsDeposit mocks base method.
func (m *MockICarStop) IsDeposit() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeposit")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDeposit indicates an expected call of IsDeposit.
func (mr *MockICarStopMockRecorder) IsDeposit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeposit", reflect.TypeOf((*MockICarStop)(nil).IsDeposit))
}

// Point mocks base method.
func (m *MockICarStop) Point() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Point")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// Point indicates an expected call of Point.
func (mr *MockICarStopMockRecorder) Point() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Point", reflect.TypeOf((*MockICarStop)(nil).Point))
}
