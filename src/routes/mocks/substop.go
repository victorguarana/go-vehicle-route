// Code generated by MockGen. DO NOT EDIT.
// Source: src/routes/substop.go
//
// Generated by this command:
//
//	mockgen -source=src/routes/substop.go -destination=src/routes/mocks/substop.go -package=mockroutes
//

// Package mockroutes is a generated GoMock package.
package mockroutes

import (
	reflect "reflect"

	gps "github.com/victorguarana/go-vehicle-route/src/gps"
	gomock "go.uber.org/mock/gomock"
)

// MockISubStop is a mock of ISubStop interface.
type MockISubStop struct {
	ctrl     *gomock.Controller
	recorder *MockISubStopMockRecorder
}

// MockISubStopMockRecorder is the mock recorder for MockISubStop.
type MockISubStopMockRecorder struct {
	mock *MockISubStop
}

// NewMockISubStop creates a new mock instance.
func NewMockISubStop(ctrl *gomock.Controller) *MockISubStop {
	mock := &MockISubStop{ctrl: ctrl}
	mock.recorder = &MockISubStopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISubStop) EXPECT() *MockISubStopMockRecorder {
	return m.recorder
}

// Point mocks base method.
func (m *MockISubStop) Point() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Point")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// Point indicates an expected call of Point.
func (mr *MockISubStopMockRecorder) Point() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Point", reflect.TypeOf((*MockISubStop)(nil).Point))
}
