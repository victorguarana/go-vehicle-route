// Code generated by MockGen. DO NOT EDIT.
// Source: src/routes/mainstop.go
//
// Generated by this command:
//
//	mockgen -source=src/routes/mainstop.go -destination=src/routes/mocks/mainstop.go -package=mockroutes
//

// Package mockroutes is a generated GoMock package.
package mockroutes

import (
	reflect "reflect"

	gps "github.com/victorguarana/go-vehicle-route/src/gps"
	routes "github.com/victorguarana/go-vehicle-route/src/routes"
	gomock "go.uber.org/mock/gomock"
)

// MockIMainStop is a mock of IMainStop interface.
type MockIMainStop struct {
	ctrl     *gomock.Controller
	recorder *MockIMainStopMockRecorder
}

// MockIMainStopMockRecorder is the mock recorder for MockIMainStop.
type MockIMainStopMockRecorder struct {
	mock *MockIMainStop
}

// NewMockIMainStop creates a new mock instance.
func NewMockIMainStop(ctrl *gomock.Controller) *MockIMainStop {
	mock := &MockIMainStop{ctrl: ctrl}
	mock.recorder = &MockIMainStopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMainStop) EXPECT() *MockIMainStopMockRecorder {
	return m.recorder
}

// IsClient mocks base method.
func (m *MockIMainStop) IsClient() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClient")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClient indicates an expected call of IsClient.
func (mr *MockIMainStopMockRecorder) IsClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClient", reflect.TypeOf((*MockIMainStop)(nil).IsClient))
}

// IsDeposit mocks base method.
func (m *MockIMainStop) IsDeposit() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeposit")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDeposit indicates an expected call of IsDeposit.
func (mr *MockIMainStopMockRecorder) IsDeposit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeposit", reflect.TypeOf((*MockIMainStop)(nil).IsDeposit))
}

// Point mocks base method.
func (m *MockIMainStop) Point() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Point")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// Point indicates an expected call of Point.
func (mr *MockIMainStopMockRecorder) Point() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Point", reflect.TypeOf((*MockIMainStop)(nil).Point))
}

// SubRoutes mocks base method.
func (m *MockIMainStop) SubRoutes() []routes.ISubRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubRoutes")
	ret0, _ := ret[0].([]routes.ISubRoute)
	return ret0
}

// SubRoutes indicates an expected call of SubRoutes.
func (mr *MockIMainStopMockRecorder) SubRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRoutes", reflect.TypeOf((*MockIMainStop)(nil).SubRoutes))
}
