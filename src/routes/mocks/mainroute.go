// Code generated by MockGen. DO NOT EDIT.
// Source: src/routes/mainroute.go
//
// Generated by this command:
//
//	mockgen -source=src/routes/mainroute.go -destination=src/routes/mocks/mainroute.go -package=mockroutes
//

// Package mockroutes is a generated GoMock package.
package mockroutes

import (
	reflect "reflect"

	routes "github.com/victorguarana/go-vehicle-route/src/routes"
	slc "github.com/victorguarana/go-vehicle-route/src/slc"
	gomock "go.uber.org/mock/gomock"
)

// MockIMainRoute is a mock of IMainRoute interface.
type MockIMainRoute struct {
	ctrl     *gomock.Controller
	recorder *MockIMainRouteMockRecorder
}

// MockIMainRouteMockRecorder is the mock recorder for MockIMainRoute.
type MockIMainRouteMockRecorder struct {
	mock *MockIMainRoute
}

// NewMockIMainRoute creates a new mock instance.
func NewMockIMainRoute(ctrl *gomock.Controller) *MockIMainRoute {
	mock := &MockIMainRoute{ctrl: ctrl}
	mock.recorder = &MockIMainRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMainRoute) EXPECT() *MockIMainRouteMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockIMainRoute) Append(mainStop routes.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Append", mainStop)
}

// Append indicates an expected call of Append.
func (mr *MockIMainRouteMockRecorder) Append(mainStop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockIMainRoute)(nil).Append), mainStop)
}

// AtIndex mocks base method.
func (m *MockIMainRoute) AtIndex(index int) routes.IMainStop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtIndex", index)
	ret0, _ := ret[0].(routes.IMainStop)
	return ret0
}

// AtIndex indicates an expected call of AtIndex.
func (mr *MockIMainRouteMockRecorder) AtIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtIndex", reflect.TypeOf((*MockIMainRoute)(nil).AtIndex), index)
}

// First mocks base method.
func (m *MockIMainRoute) First() routes.IMainStop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First")
	ret0, _ := ret[0].(routes.IMainStop)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockIMainRouteMockRecorder) First() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockIMainRoute)(nil).First))
}

// Iterator mocks base method.
func (m *MockIMainRoute) Iterator() slc.Iterator[routes.IMainStop] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iterator")
	ret0, _ := ret[0].(slc.Iterator[routes.IMainStop])
	return ret0
}

// Iterator indicates an expected call of Iterator.
func (mr *MockIMainRouteMockRecorder) Iterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterator", reflect.TypeOf((*MockIMainRoute)(nil).Iterator))
}

// Last mocks base method.
func (m *MockIMainRoute) Last() routes.IMainStop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last")
	ret0, _ := ret[0].(routes.IMainStop)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockIMainRouteMockRecorder) Last() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockIMainRoute)(nil).Last))
}

// Len mocks base method.
func (m *MockIMainRoute) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockIMainRouteMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockIMainRoute)(nil).Len))
}

// RemoveMainStop mocks base method.
func (m *MockIMainRoute) RemoveMainStop(index int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveMainStop", index)
}

// RemoveMainStop indicates an expected call of RemoveMainStop.
func (mr *MockIMainRouteMockRecorder) RemoveMainStop(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMainStop", reflect.TypeOf((*MockIMainRoute)(nil).RemoveMainStop), index)
}

// String mocks base method.
func (m *MockIMainRoute) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIMainRouteMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIMainRoute)(nil).String))
}
