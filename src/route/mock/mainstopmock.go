// Code generated by MockGen. DO NOT EDIT.
// Source: src/route/mainstop.go
//
// Generated by this command:
//
//	mockgen -source=src/route/mainstop.go -destination=src/route/mock/mainstopmock.go
//

// Package mock_route is a generated GoMock package.
package mock_route

import (
	reflect "reflect"

	gps "github.com/victorguarana/vehicle-routing/src/gps"
	route "github.com/victorguarana/vehicle-routing/src/route"
	gomock "go.uber.org/mock/gomock"
)

// MockIMainStop is a mock of IMainStop interface.
type MockIMainStop struct {
	ctrl     *gomock.Controller
	recorder *MockIMainStopMockRecorder
}

// MockIMainStopMockRecorder is the mock recorder for MockIMainStop.
type MockIMainStopMockRecorder struct {
	mock *MockIMainStop
}

// NewMockIMainStop creates a new mock instance.
func NewMockIMainStop(ctrl *gomock.Controller) *MockIMainStop {
	mock := &MockIMainStop{ctrl: ctrl}
	mock.recorder = &MockIMainStopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMainStop) EXPECT() *MockIMainStopMockRecorder {
	return m.recorder
}

// IsClient mocks base method.
func (m *MockIMainStop) IsClient() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClient")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClient indicates an expected call of IsClient.
func (mr *MockIMainStopMockRecorder) IsClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClient", reflect.TypeOf((*MockIMainStop)(nil).IsClient))
}

// IsWarehouse mocks base method.
func (m *MockIMainStop) IsWarehouse() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWarehouse")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWarehouse indicates an expected call of IsWarehouse.
func (mr *MockIMainStopMockRecorder) IsWarehouse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWarehouse", reflect.TypeOf((*MockIMainStop)(nil).IsWarehouse))
}

// Latitude mocks base method.
func (m *MockIMainStop) Latitude() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latitude")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Latitude indicates an expected call of Latitude.
func (mr *MockIMainStopMockRecorder) Latitude() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latitude", reflect.TypeOf((*MockIMainStop)(nil).Latitude))
}

// Longitude mocks base method.
func (m *MockIMainStop) Longitude() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Longitude")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Longitude indicates an expected call of Longitude.
func (mr *MockIMainStopMockRecorder) Longitude() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Longitude", reflect.TypeOf((*MockIMainStop)(nil).Longitude))
}

// Name mocks base method.
func (m *MockIMainStop) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIMainStopMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIMainStop)(nil).Name))
}

// Point mocks base method.
func (m *MockIMainStop) Point() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Point")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// Point indicates an expected call of Point.
func (mr *MockIMainStopMockRecorder) Point() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Point", reflect.TypeOf((*MockIMainStop)(nil).Point))
}

// ReturningSubRoutes mocks base method.
func (m *MockIMainStop) ReturningSubRoutes() []route.ISubRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturningSubRoutes")
	ret0, _ := ret[0].([]route.ISubRoute)
	return ret0
}

// ReturningSubRoutes indicates an expected call of ReturningSubRoutes.
func (mr *MockIMainStopMockRecorder) ReturningSubRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturningSubRoutes", reflect.TypeOf((*MockIMainStop)(nil).ReturningSubRoutes))
}

// StartingSubRoutes mocks base method.
func (m *MockIMainStop) StartingSubRoutes() []route.ISubRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartingSubRoutes")
	ret0, _ := ret[0].([]route.ISubRoute)
	return ret0
}

// StartingSubRoutes indicates an expected call of StartingSubRoutes.
func (mr *MockIMainStopMockRecorder) StartingSubRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartingSubRoutes", reflect.TypeOf((*MockIMainStop)(nil).StartingSubRoutes))
}
