// Code generated by MockGen. DO NOT EDIT.
// Source: src/itinerary/itinerary.go
//
// Generated by this command:
//
//	mockgen -source=src/itinerary/itinerary.go -destination=src/itinerary/mocks/itinerarymock.go -package=mockitinerary
//

// Package mockitinerary is a generated GoMock package.
package mockitinerary

import (
	reflect "reflect"

	gps "github.com/victorguarana/vehicle-routing/src/gps"
	itinerary "github.com/victorguarana/vehicle-routing/src/itinerary"
	routes "github.com/victorguarana/vehicle-routing/src/routes"
	slc "github.com/victorguarana/vehicle-routing/src/slc"
	gomock "go.uber.org/mock/gomock"
)

// MockItinerary is a mock of Itinerary interface.
type MockItinerary struct {
	ctrl     *gomock.Controller
	recorder *MockItineraryMockRecorder
}

// MockItineraryMockRecorder is the mock recorder for MockItinerary.
type MockItineraryMockRecorder struct {
	mock *MockItinerary
}

// NewMockItinerary creates a new mock instance.
func NewMockItinerary(ctrl *gomock.Controller) *MockItinerary {
	mock := &MockItinerary{ctrl: ctrl}
	mock.recorder = &MockItineraryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItinerary) EXPECT() *MockItineraryMockRecorder {
	return m.recorder
}

// ActualCarPoint mocks base method.
func (m *MockItinerary) ActualCarPoint() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarPoint")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// ActualCarPoint indicates an expected call of ActualCarPoint.
func (mr *MockItineraryMockRecorder) ActualCarPoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarPoint", reflect.TypeOf((*MockItinerary)(nil).ActualCarPoint))
}

// ActualCarStop mocks base method.
func (m *MockItinerary) ActualCarStop() routes.IMainStop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarStop")
	ret0, _ := ret[0].(routes.IMainStop)
	return ret0
}

// ActualCarStop indicates an expected call of ActualCarStop.
func (mr *MockItineraryMockRecorder) ActualCarStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarStop", reflect.TypeOf((*MockItinerary)(nil).ActualCarStop))
}

// CarSupport mocks base method.
func (m *MockItinerary) CarSupport(nextPoints ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range nextPoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CarSupport", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CarSupport indicates an expected call of CarSupport.
func (mr *MockItineraryMockRecorder) CarSupport(nextPoints ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarSupport", reflect.TypeOf((*MockItinerary)(nil).CarSupport), nextPoints...)
}

// DroneCanReach mocks base method.
func (m *MockItinerary) DroneCanReach(droneNumber itinerary.DroneNumber, nextPoints ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{droneNumber}
	for _, a := range nextPoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DroneCanReach", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneCanReach indicates an expected call of DroneCanReach.
func (mr *MockItineraryMockRecorder) DroneCanReach(droneNumber any, nextPoints ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{droneNumber}, nextPoints...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneCanReach", reflect.TypeOf((*MockItinerary)(nil).DroneCanReach), varargs...)
}

// DroneIsFlying mocks base method.
func (m *MockItinerary) DroneIsFlying(droneNumber itinerary.DroneNumber) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneIsFlying", droneNumber)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneIsFlying indicates an expected call of DroneIsFlying.
func (mr *MockItineraryMockRecorder) DroneIsFlying(droneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneIsFlying", reflect.TypeOf((*MockItinerary)(nil).DroneIsFlying), droneNumber)
}

// DroneNumbers mocks base method.
func (m *MockItinerary) DroneNumbers() []itinerary.DroneNumber {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneNumbers")
	ret0, _ := ret[0].([]itinerary.DroneNumber)
	return ret0
}

// DroneNumbers indicates an expected call of DroneNumbers.
func (mr *MockItineraryMockRecorder) DroneNumbers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneNumbers", reflect.TypeOf((*MockItinerary)(nil).DroneNumbers))
}

// DroneSupport mocks base method.
func (m *MockItinerary) DroneSupport(droneNumber itinerary.DroneNumber, nextPoints ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{droneNumber}
	for _, a := range nextPoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DroneSupport", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneSupport indicates an expected call of DroneSupport.
func (mr *MockItineraryMockRecorder) DroneSupport(droneNumber any, nextPoints ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{droneNumber}, nextPoints...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneSupport", reflect.TypeOf((*MockItinerary)(nil).DroneSupport), varargs...)
}

// LandAllDrones mocks base method.
func (m *MockItinerary) LandAllDrones(landingStop routes.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LandAllDrones", landingStop)
}

// LandAllDrones indicates an expected call of LandAllDrones.
func (mr *MockItineraryMockRecorder) LandAllDrones(landingStop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LandAllDrones", reflect.TypeOf((*MockItinerary)(nil).LandAllDrones), landingStop)
}

// LandDrone mocks base method.
func (m *MockItinerary) LandDrone(droneNumber itinerary.DroneNumber, destination routes.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LandDrone", droneNumber, destination)
}

// LandDrone indicates an expected call of LandDrone.
func (mr *MockItineraryMockRecorder) LandDrone(droneNumber, destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LandDrone", reflect.TypeOf((*MockItinerary)(nil).LandDrone), droneNumber, destination)
}

// MoveCar mocks base method.
func (m *MockItinerary) MoveCar(destination gps.Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveCar", destination)
}

// MoveCar indicates an expected call of MoveCar.
func (mr *MockItineraryMockRecorder) MoveCar(destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCar", reflect.TypeOf((*MockItinerary)(nil).MoveCar), destination)
}

// MoveDrone mocks base method.
func (m *MockItinerary) MoveDrone(droneNumber itinerary.DroneNumber, destination gps.Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveDrone", droneNumber, destination)
}

// MoveDrone indicates an expected call of MoveDrone.
func (mr *MockItineraryMockRecorder) MoveDrone(droneNumber, destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveDrone", reflect.TypeOf((*MockItinerary)(nil).MoveDrone), droneNumber, destination)
}

// RemoveMainStopFromRoute mocks base method.
func (m *MockItinerary) RemoveMainStopFromRoute(index int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveMainStopFromRoute", index)
}

// RemoveMainStopFromRoute indicates an expected call of RemoveMainStopFromRoute.
func (mr *MockItineraryMockRecorder) RemoveMainStopFromRoute(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMainStopFromRoute", reflect.TypeOf((*MockItinerary)(nil).RemoveMainStopFromRoute), index)
}

// RouteIterator mocks base method.
func (m *MockItinerary) RouteIterator() slc.Iterator[routes.IMainStop] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteIterator")
	ret0, _ := ret[0].(slc.Iterator[routes.IMainStop])
	return ret0
}

// RouteIterator indicates an expected call of RouteIterator.
func (mr *MockItineraryMockRecorder) RouteIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteIterator", reflect.TypeOf((*MockItinerary)(nil).RouteIterator))
}

// StartDroneFlight mocks base method.
func (m *MockItinerary) StartDroneFlight(droneNumber itinerary.DroneNumber, startingPoint routes.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartDroneFlight", droneNumber, startingPoint)
}

// StartDroneFlight indicates an expected call of StartDroneFlight.
func (mr *MockItineraryMockRecorder) StartDroneFlight(droneNumber, startingPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDroneFlight", reflect.TypeOf((*MockItinerary)(nil).StartDroneFlight), droneNumber, startingPoint)
}
