// Code generated by MockGen. DO NOT EDIT.
// Source: modifier.go
//
// Generated by this command:
//
//	mockgen -source=modifier.go -destination=mock/modifiermock.go
//

// Package mock_itinerary is a generated GoMock package.
package mock_itinerary

import (
	reflect "reflect"

	gps "github.com/victorguarana/vehicle-routing/src/gps"
	itinerary "github.com/victorguarana/vehicle-routing/src/itinerary"
	route "github.com/victorguarana/vehicle-routing/src/route"
	slc "github.com/victorguarana/vehicle-routing/src/slc"
	gomock "go.uber.org/mock/gomock"
)

// MockModifier is a mock of Modifier interface.
type MockModifier struct {
	ctrl     *gomock.Controller
	recorder *MockModifierMockRecorder
}

// MockModifierMockRecorder is the mock recorder for MockModifier.
type MockModifierMockRecorder struct {
	mock *MockModifier
}

// NewMockModifier creates a new mock instance.
func NewMockModifier(ctrl *gomock.Controller) *MockModifier {
	mock := &MockModifier{ctrl: ctrl}
	mock.recorder = &MockModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModifier) EXPECT() *MockModifierMockRecorder {
	return m.recorder
}

// ActualCarPoint mocks base method.
func (m *MockModifier) ActualCarPoint() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarPoint")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// ActualCarPoint indicates an expected call of ActualCarPoint.
func (mr *MockModifierMockRecorder) ActualCarPoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarPoint", reflect.TypeOf((*MockModifier)(nil).ActualCarPoint))
}

// ActualCarStop mocks base method.
func (m *MockModifier) ActualCarStop() route.IMainStop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarStop")
	ret0, _ := ret[0].(route.IMainStop)
	return ret0
}

// ActualCarStop indicates an expected call of ActualCarStop.
func (mr *MockModifierMockRecorder) ActualCarStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarStop", reflect.TypeOf((*MockModifier)(nil).ActualCarStop))
}

// CarEfficiency mocks base method.
func (m *MockModifier) CarEfficiency() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CarEfficiency")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CarEfficiency indicates an expected call of CarEfficiency.
func (mr *MockModifierMockRecorder) CarEfficiency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarEfficiency", reflect.TypeOf((*MockModifier)(nil).CarEfficiency))
}

// CarSpeed mocks base method.
func (m *MockModifier) CarSpeed() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CarSpeed")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CarSpeed indicates an expected call of CarSpeed.
func (mr *MockModifierMockRecorder) CarSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarSpeed", reflect.TypeOf((*MockModifier)(nil).CarSpeed))
}

// CarSupport mocks base method.
func (m *MockModifier) CarSupport(nextPoints ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range nextPoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CarSupport", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CarSupport indicates an expected call of CarSupport.
func (mr *MockModifierMockRecorder) CarSupport(nextPoints ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarSupport", reflect.TypeOf((*MockModifier)(nil).CarSupport), nextPoints...)
}

// DroneCanReach mocks base method.
func (m *MockModifier) DroneCanReach(droneNumber itinerary.DroneNumber, nextPoints ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{droneNumber}
	for _, a := range nextPoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DroneCanReach", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneCanReach indicates an expected call of DroneCanReach.
func (mr *MockModifierMockRecorder) DroneCanReach(droneNumber any, nextPoints ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{droneNumber}, nextPoints...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneCanReach", reflect.TypeOf((*MockModifier)(nil).DroneCanReach), varargs...)
}

// DroneEfficiency mocks base method.
func (m *MockModifier) DroneEfficiency() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneEfficiency")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DroneEfficiency indicates an expected call of DroneEfficiency.
func (mr *MockModifierMockRecorder) DroneEfficiency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneEfficiency", reflect.TypeOf((*MockModifier)(nil).DroneEfficiency))
}

// DroneIsFlying mocks base method.
func (m *MockModifier) DroneIsFlying(droneNumber itinerary.DroneNumber) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneIsFlying", droneNumber)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneIsFlying indicates an expected call of DroneIsFlying.
func (mr *MockModifierMockRecorder) DroneIsFlying(droneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneIsFlying", reflect.TypeOf((*MockModifier)(nil).DroneIsFlying), droneNumber)
}

// DroneNumbers mocks base method.
func (m *MockModifier) DroneNumbers() []itinerary.DroneNumber {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneNumbers")
	ret0, _ := ret[0].([]itinerary.DroneNumber)
	return ret0
}

// DroneNumbers indicates an expected call of DroneNumbers.
func (mr *MockModifierMockRecorder) DroneNumbers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneNumbers", reflect.TypeOf((*MockModifier)(nil).DroneNumbers))
}

// DroneSpeed mocks base method.
func (m *MockModifier) DroneSpeed() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneSpeed")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DroneSpeed indicates an expected call of DroneSpeed.
func (mr *MockModifierMockRecorder) DroneSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneSpeed", reflect.TypeOf((*MockModifier)(nil).DroneSpeed))
}

// DroneSupport mocks base method.
func (m *MockModifier) DroneSupport(droneNumber itinerary.DroneNumber, deliveryPoint, landingPoint gps.Point) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneSupport", droneNumber, deliveryPoint, landingPoint)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneSupport indicates an expected call of DroneSupport.
func (mr *MockModifierMockRecorder) DroneSupport(droneNumber, deliveryPoint, landingPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneSupport", reflect.TypeOf((*MockModifier)(nil).DroneSupport), droneNumber, deliveryPoint, landingPoint)
}

// RemoveDroneStopFromFlight mocks base method.
func (m *MockModifier) RemoveDroneStopFromFlight(index int, flight route.ISubRoute) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveDroneStopFromFlight", index, flight)
}

// RemoveDroneStopFromFlight indicates an expected call of RemoveDroneStopFromFlight.
func (mr *MockModifierMockRecorder) RemoveDroneStopFromFlight(index, flight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDroneStopFromFlight", reflect.TypeOf((*MockModifier)(nil).RemoveDroneStopFromFlight), index, flight)
}

// RemoveMainStopFromRoute mocks base method.
func (m *MockModifier) RemoveMainStopFromRoute(index int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveMainStopFromRoute", index)
}

// RemoveMainStopFromRoute indicates an expected call of RemoveMainStopFromRoute.
func (mr *MockModifierMockRecorder) RemoveMainStopFromRoute(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMainStopFromRoute", reflect.TypeOf((*MockModifier)(nil).RemoveMainStopFromRoute), index)
}

// RouteIterator mocks base method.
func (m *MockModifier) RouteIterator() slc.Iterator[route.IMainStop] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteIterator")
	ret0, _ := ret[0].(slc.Iterator[route.IMainStop])
	return ret0
}

// RouteIterator indicates an expected call of RouteIterator.
func (mr *MockModifierMockRecorder) RouteIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteIterator", reflect.TypeOf((*MockModifier)(nil).RouteIterator))
}

// SubItineraryList mocks base method.
func (m *MockModifier) SubItineraryList() []itinerary.SubItinerary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubItineraryList")
	ret0, _ := ret[0].([]itinerary.SubItinerary)
	return ret0
}

// SubItineraryList indicates an expected call of SubItineraryList.
func (mr *MockModifierMockRecorder) SubItineraryList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubItineraryList", reflect.TypeOf((*MockModifier)(nil).SubItineraryList))
}

// TryToInsertDroneDelivery mocks base method.
func (m *MockModifier) TryToInsertDroneDelivery(point gps.Point, calcCost func(itinerary.Info) float64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToInsertDroneDelivery", point, calcCost)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryToInsertDroneDelivery indicates an expected call of TryToInsertDroneDelivery.
func (mr *MockModifierMockRecorder) TryToInsertDroneDelivery(point, calcCost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToInsertDroneDelivery", reflect.TypeOf((*MockModifier)(nil).TryToInsertDroneDelivery), point, calcCost)
}

// TryToInsertIntoRoutes mocks base method.
func (m *MockModifier) TryToInsertIntoRoutes(point gps.Point, calcCost func(itinerary.Info) float64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToInsertIntoRoutes", point, calcCost)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryToInsertIntoRoutes indicates an expected call of TryToInsertIntoRoutes.
func (mr *MockModifierMockRecorder) TryToInsertIntoRoutes(point, calcCost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToInsertIntoRoutes", reflect.TypeOf((*MockModifier)(nil).TryToInsertIntoRoutes), point, calcCost)
}
