// Code generated by MockGen. DO NOT EDIT.
// Source: src/vehicles/drone.go
//
// Generated by this command:
//
//	mockgen -source=src/vehicles/drone.go -destination=src/vehicles/mocks/dronemock.go -package=mockvehicles
//
// Package mockvehicles is a generated GoMock package.
package mockvehicles

import (
	reflect "reflect"

	gps "github.com/victorguarana/go-vehicle-route/src/gps"
	gomock "go.uber.org/mock/gomock"
)

// MockIDrone is a mock of IDrone interface.
type MockIDrone struct {
	ctrl     *gomock.Controller
	recorder *MockIDroneMockRecorder
}

// MockIDroneMockRecorder is the mock recorder for MockIDrone.
type MockIDroneMockRecorder struct {
	mock *MockIDrone
}

// NewMockIDrone creates a new mock instance.
func NewMockIDrone(ctrl *gomock.Controller) *MockIDrone {
	mock := &MockIDrone{ctrl: ctrl}
	mock.recorder = &MockIDroneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDrone) EXPECT() *MockIDroneMockRecorder {
	return m.recorder
}

// ActualPosition mocks base method.
func (m *MockIDrone) ActualPosition() *gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualPosition")
	ret0, _ := ret[0].(*gps.Point)
	return ret0
}

// ActualPosition indicates an expected call of ActualPosition.
func (mr *MockIDroneMockRecorder) ActualPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualPosition", reflect.TypeOf((*MockIDrone)(nil).ActualPosition))
}

// Dock mocks base method.
func (m *MockIDrone) Dock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dock")
}

// Dock indicates an expected call of Dock.
func (mr *MockIDroneMockRecorder) Dock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dock", reflect.TypeOf((*MockIDrone)(nil).Dock))
}

// IsFlying mocks base method.
func (m *MockIDrone) IsFlying() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFlying")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFlying indicates an expected call of IsFlying.
func (mr *MockIDroneMockRecorder) IsFlying() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFlying", reflect.TypeOf((*MockIDrone)(nil).IsFlying))
}

// Move mocks base method.
func (m *MockIDrone) Move(arg0 *gps.Point) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockIDroneMockRecorder) Move(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockIDrone)(nil).Move), arg0)
}

// Support mocks base method.
func (m *MockIDrone) Support(arg0 ...*gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Support", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Support indicates an expected call of Support.
func (mr *MockIDroneMockRecorder) Support(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Support", reflect.TypeOf((*MockIDrone)(nil).Support), arg0...)
}

// TakeOff mocks base method.
func (m *MockIDrone) TakeOff() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TakeOff")
}

// TakeOff indicates an expected call of TakeOff.
func (mr *MockIDroneMockRecorder) TakeOff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeOff", reflect.TypeOf((*MockIDrone)(nil).TakeOff))
}
