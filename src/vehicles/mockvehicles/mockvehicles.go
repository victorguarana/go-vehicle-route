// Code generated by MockGen. DO NOT EDIT.
// Source: vehicles/car.go

// Package mock_vehicles is a generated GoMock package.
package mockvehicles

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gps "github.com/victorguarana/go-vehicle-route/src/gps"
)

// MockICar is a mock of ICar interface.
type MockICar struct {
	ctrl     *gomock.Controller
	recorder *MockICarMockRecorder
}

// MockICarMockRecorder is the mock recorder for MockICar.
type MockICarMockRecorder struct {
	mock *MockICar
}

// NewMockICar creates a new mock instance.
func NewMockICar(ctrl *gomock.Controller) *MockICar {
	mock := &MockICar{ctrl: ctrl}
	mock.recorder = &MockICarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICar) EXPECT() *MockICarMockRecorder {
	return m.recorder
}

// ActualPosition mocks base method.
func (m *MockICar) ActualPosition() *gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualPosition")
	ret0, _ := ret[0].(*gps.Point)
	return ret0
}

// ActualPosition indicates an expected call of ActualPosition.
func (mr *MockICarMockRecorder) ActualPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualPosition", reflect.TypeOf((*MockICar)(nil).ActualPosition))
}

// Move mocks base method.
func (m *MockICar) Move(arg0 *gps.Point) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockICarMockRecorder) Move(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockICar)(nil).Move), arg0)
}

// NewDrone mocks base method.
func (m *MockICar) NewDrone(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewDrone", arg0)
}

// NewDrone indicates an expected call of NewDrone.
func (mr *MockICarMockRecorder) NewDrone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDrone", reflect.TypeOf((*MockICar)(nil).NewDrone), arg0)
}

// Support mocks base method.
func (m *MockICar) Support(arg0 ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Support", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Support indicates an expected call of Support.
func (mr *MockICarMockRecorder) Support(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Support", reflect.TypeOf((*MockICar)(nil).Support), arg0...)
}
